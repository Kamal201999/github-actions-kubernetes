name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              
  build-and-deploy:
    needs: code-analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    env:
      IMAGE_NAME: kamal201999/hello-kubernetes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Pull and Deploy
        run: |
          docker pull $IMAGE_NAME:${{ github.sha }}
          echo "Docker image ready for Kubernetes deployment"

  Infra-creation:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure SSH Keys from Secrets
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa 
          chmod 600 ~/.ssh/id_rsa
          echo "PUBLIC_KEY=${{ secrets.PUBLIC_KEY }}" >> $GITHUB_ENV
          echo "KEY_NAME=deployer-${{ github.run_id }}" >> $GITHUB_ENV
              
      - name: Terraform Init
        run: terraform -chdir=Terraform init

      - name: Terraform Validate
        run: terraform -chdir=Terraform validate

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          echo "Running terraform apply..."
          terraform -chdir=Terraform apply -auto-approve \
           -var="key_name=${{ env.KEY_NAME }}" \
           -var="public_key=${{ env.PUBLIC_KEY }}" \
           -var="private_key=${{ env.PRIVATE_KEY }}"

          ec2_ip=$(terraform -chdir=Terraform output -raw ec2_public_ip | tr -d '\n' | tr -d '\r')
          echo "$ec2_ip" > ec2_ip.txt
          echo "-----SUCCESSFULLY COMPLETED CREATION-----"

      - name: Upload EC2 IP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-ip
          path: ec2_ip.txt

  kubernetes-deployment:
    needs: Infra-creation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download EC2 IP Artifact
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip
          path: ec2_data

      - name: Extract EC2 IP from File
        id: extract_ip
        run: |
          EC2_IP=$(sed -n 's/.*stdout:[[:space:]]*\([0-9.]*\).*/\1/p' ec2_data/ec2_ip.txt)
          echo "EC2 IP extracted: $EC2_IP"
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV       

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy Files
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa deployment.yaml service.yaml ubuntu@$EC2_IP:/home/ubuntu/

      - name: SSH and Deploy to Kubernetes
        run: |
          echo "Connecting to $EC2_IP"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP <<EOF
            cd /home/ubuntu
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
            kubectl get pods -o wide
            kubectl get svc -o wide
          EOF


  Notification:
    needs: [code-analysis, build-and-deploy, Infra-creation, kubernetes-deployment]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "GitHub Actions Pipeline Finished with status: ${{ job.status }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  destroy:
    name: Destroy infra on failure
    if: failure()
    needs: [Infra-creation, kubernetes-deployment, Notification]
    runs-on: ubuntu-latest
    env: 
      KEY_NAME: deployer-${{ github.run_id }}
    timeout-minutes: 10
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Destruction Starts
        run: echo "Some required job failed. Destroying infrastructure due to demo purpose."

      - name: Terraform Init
        run: terraform -chdir=Terraform init

      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: terraform -chdir=Terraform destroy -auto-approve \
          -var="key_name=${{ env.KEY_NAME }}" \
          -var="private_key=${{ secrets.PRIVATE_KEY }}"      
        
